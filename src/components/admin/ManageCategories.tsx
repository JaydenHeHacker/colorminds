import { useState } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { FolderTree, Plus, Edit, Trash2, Loader2, ChevronRight, ChevronDown, Wand2, Image } from "lucide-react";
import { toast } from "sonner";
import { slugify } from "@/lib/slugify";
import { Badge } from "@/components/ui/badge";

interface Category {
  id: string;
  name: string;
  slug: string;
  description: string | null;
  icon: string | null;
  parent_id: string | null;
  level: number;
  path: string;
  order_position: number;
  created_at: string;
}

export default function ManageCategories() {
  const queryClient = useQueryClient();
  const [editingCategory, setEditingCategory] = useState<Category | null>(null);
  const [deletingCategoryId, setDeletingCategoryId] = useState<string | null>(null);
  const [isCreating, setIsCreating] = useState(false);
  const [expandedCategories, setExpandedCategories] = useState<Set<string>>(new Set());
  const [generatingForCategory, setGeneratingForCategory] = useState<Category | null>(null);

  // Form state
  const [formName, setFormName] = useState("");
  const [formSlug, setFormSlug] = useState("");
  const [formDescription, setFormDescription] = useState("");
  const [formIcon, setFormIcon] = useState("");
  const [formParentId, setFormParentId] = useState<string | null>(null);
  const [formOrderPosition, setFormOrderPosition] = useState("0");

  // Generation form state
  const [theme, setTheme] = useState("");
  const [difficulty, setDifficulty] = useState<"easy" | "medium" | "hard">("medium");
  const [generationType, setGenerationType] = useState<"single" | "series">("single");
  const [seriesLength, setSeriesLength] = useState("5");
  const [generateCount, setGenerateCount] = useState("1");
  const [generatedImages, setGeneratedImages] = useState<string[]>([]);
  const [generatedPagesData, setGeneratedPagesData] = useState<any[]>([]);
  const [isGenerating, setIsGenerating] = useState(false);
  const [isSaving, setIsSaving] = useState(false);

  const { data: categories, isLoading } = useQuery({
    queryKey: ['admin-categories'],
    queryFn: async () => {
      const { data, error } = await supabase
        .from('categories')
        .select('*')
        .order('level', { ascending: true })
        .order('order_position', { ascending: true })
        .order('name', { ascending: true });
      
      if (error) throw error;
      return data as Category[];
    },
  });

  // Query for coloring pages count per category
  const { data: categoryPageCounts } = useQuery({
    queryKey: ['category-page-counts'],
    queryFn: async () => {
      const { data, error } = await supabase
        .from('coloring_pages')
        .select('category_id');
      
      if (error) throw error;
      
      // Count pages per category
      const counts: Record<string, number> = {};
      data.forEach(page => {
        if (page.category_id) {
          counts[page.category_id] = (counts[page.category_id] || 0) + 1;
        }
      });
      return counts;
    },
  });

  const createMutation = useMutation({
    mutationFn: async (newCategory: { 
      name: string;
      slug: string;
      description?: string | null;
      icon?: string | null;
      parent_id?: string | null;
      order_position?: number;
    }) => {
      // path and level will be auto-generated by database trigger
      const dataWithPath = { ...newCategory, path: newCategory.slug };
      const { error } = await supabase
        .from('categories')
        .insert([dataWithPath]);
      
      if (error) throw error;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['admin-categories'] });
      queryClient.invalidateQueries({ queryKey: ['categories'] });
      toast.success("分类创建成功！");
      resetForm();
      setIsCreating(false);
    },
    onError: (error: Error) => {
      toast.error("创建失败：" + error.message);
    },
  });

  const updateMutation = useMutation({
    mutationFn: async ({ id, updates }: { id: string; updates: Partial<Category> }) => {
      const { error } = await supabase
        .from('categories')
        .update(updates)
        .eq('id', id);
      
      if (error) throw error;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['admin-categories'] });
      queryClient.invalidateQueries({ queryKey: ['categories'] });
      toast.success("更新成功！");
      setEditingCategory(null);
      resetForm();
    },
    onError: (error: Error) => {
      toast.error("更新失败：" + error.message);
    },
  });

  const deleteMutation = useMutation({
    mutationFn: async (id: string) => {
      const { error } = await supabase
        .from('categories')
        .delete()
        .eq('id', id);
      
      if (error) throw error;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['admin-categories'] });
      queryClient.invalidateQueries({ queryKey: ['categories'] });
      toast.success("删除成功！");
      setDeletingCategoryId(null);
    },
    onError: (error: Error) => {
      toast.error("删除失败：" + error.message);
    },
  });

  const resetForm = () => {
    setFormName("");
    setFormSlug("");
    setFormDescription("");
    setFormIcon("");
    setFormParentId(null);
    setFormOrderPosition("0");
  };

  const handleOpenCreate = (parentId: string | null = null) => {
    resetForm();
    setFormParentId(parentId);
    setIsCreating(true);
  };

  const handleOpenEdit = (category: Category) => {
    setEditingCategory(category);
    setFormName(category.name);
    setFormSlug(category.slug);
    setFormDescription(category.description || "");
    setFormIcon(category.icon || "");
    setFormParentId(category.parent_id);
    setFormOrderPosition(category.order_position.toString());
  };

  const handleSave = async () => {
    if (!formName || !formSlug) {
      toast.error("请填写必填项");
      return;
    }

    const categoryData = {
      name: formName,
      slug: formSlug,
      description: formDescription || null,
      icon: formIcon || null,
      parent_id: formParentId,
      order_position: parseInt(formOrderPosition),
    };

    if (editingCategory) {
      await updateMutation.mutateAsync({ id: editingCategory.id, updates: categoryData });
    } else {
      await createMutation.mutateAsync(categoryData);
    }
  };

  const handleNameChange = (name: string) => {
    setFormName(name);
    if (!editingCategory) {
      setFormSlug(slugify(name));
    }
  };

  const toggleExpand = (categoryId: string) => {
    const newExpanded = new Set(expandedCategories);
    if (newExpanded.has(categoryId)) {
      newExpanded.delete(categoryId);
    } else {
      newExpanded.add(categoryId);
    }
    setExpandedCategories(newExpanded);
  };

  const handleOpenGenerate = (category: Category) => {
    setGeneratingForCategory(category);
    setTheme("");
    setDifficulty("medium");
    setGenerationType("single");
    setSeriesLength("5");
    setGenerateCount("1");
    setGeneratedImages([]);
    setGeneratedPagesData([]);
  };

  const handleGenerate = async () => {
    if (!theme || !generatingForCategory) {
      toast.error("请输入主题");
      return;
    }

    setIsGenerating(true);
    try {
      if (generationType === "series") {
        const length = parseInt(seriesLength);
        const { data, error } = await supabase.functions.invoke('generate-story-series', {
          body: { 
            category: generatingForCategory.name, 
            theme, 
            difficulty, 
            seriesLength: length 
          }
        });

        if (error) throw error;
        
        const imageUrls = data.images.map((img: any) => img.imageUrl);
        setGeneratedImages(imageUrls);
        setGeneratedPagesData(data.images.map((img: any, i: number) => ({
          imageUrl: img.imageUrl,
          sceneDescription: img.sceneDescription,
          order: i
        })));
        toast.success(`成功生成 ${imageUrls.length} 张系列图片！`);
      } else {
        const count = parseInt(generateCount);
        const images: string[] = [];
        const pagesData: any[] = [];
        
        for (let i = 0; i < count; i++) {
          const { data, error } = await supabase.functions.invoke('generate-coloring-page', {
            body: { 
              category: generatingForCategory.name, 
              theme, 
              difficulty 
            }
          });

          if (error) throw error;
          
          images.push(data.imageUrl);
          pagesData.push({
            imageUrl: data.imageUrl,
            suggestedTitle: data.suggestedTitle,
            suggestedDescription: data.suggestedDescription
          });
        }
        
        setGeneratedImages(images);
        setGeneratedPagesData(pagesData);
        toast.success(`成功生成 ${count} 张图片！`);
      }
    } catch (error: any) {
      console.error('生成错误:', error);
      toast.error("生成失败：" + error.message);
    } finally {
      setIsGenerating(false);
    }
  };

  const handleSaveGenerated = async () => {
    if (!generatingForCategory || generatedImages.length === 0) {
      toast.error("没有可保存的图片");
      return;
    }

    setIsSaving(true);
    try {
      let successCount = 0;

      for (let i = 0; i < generatedImages.length; i++) {
        const imageUrl = generatedImages[i];
        const pageData = generatedPagesData[i];
        
        let title, description;
        if (generationType === "series") {
          title = `${theme} - Chapter ${i + 1}`;
          description = pageData?.sceneDescription || null;
        } else {
          title = pageData?.suggestedTitle || theme;
          description = pageData?.suggestedDescription || null;
        }

        const slug = slugify(`${title}-${Date.now()}-${i}`);

        const { error } = await supabase
          .from('coloring_pages')
          .insert({
            title,
            slug,
            description,
            image_url: imageUrl,
            category_id: generatingForCategory.id,
            difficulty,
            is_featured: false,
          });

        if (error) {
          console.error('保存错误:', error);
          toast.error(`第 ${i + 1} 张图片保存失败`);
        } else {
          successCount++;
        }
      }

      if (successCount > 0) {
        toast.success(`成功保存 ${successCount} 张图片！`);
        queryClient.invalidateQueries({ queryKey: ['category-page-counts'] });
        queryClient.invalidateQueries({ queryKey: ['coloring-pages'] });
        setGeneratingForCategory(null);
        setGeneratedImages([]);
        setGeneratedPagesData([]);
      }
    } catch (error: any) {
      console.error('保存错误:', error);
      toast.error("保存失败：" + error.message);
    } finally {
      setIsSaving(false);
    }
  };

  const buildTree = (cats: Category[]): Category[] => {
    return cats.filter(cat => cat.level === 1);
  };

  const getChildren = (parentId: string): Category[] => {
    return categories?.filter(cat => cat.parent_id === parentId) || [];
  };

  const renderCategory = (category: Category, depth: number = 0) => {
    const children = getChildren(category.id);
    const hasChildren = children.length > 0;
    const isExpanded = expandedCategories.has(category.id);

    return (
      <div key={category.id}>
        <Card className="p-4 mb-2" style={{ marginLeft: `${depth * 24}px` }}>
          <div className="flex items-center justify-between gap-4">
            <div className="flex items-center gap-3 flex-1 min-w-0">
              {hasChildren && (
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-6 w-6 flex-shrink-0"
                  onClick={() => toggleExpand(category.id)}
                >
                  {isExpanded ? (
                    <ChevronDown className="h-4 w-4" />
                  ) : (
                    <ChevronRight className="h-4 w-4" />
                  )}
                </Button>
              )}
              {!hasChildren && <div className="w-6" />}
              
              {category.icon && <span className="text-2xl flex-shrink-0">{category.icon}</span>}
              
              <div className="flex-1 min-w-0">
                <div className="flex items-center gap-2">
                  <h3 className="font-semibold truncate">{category.name}</h3>
                  <Badge variant="secondary" className="gap-1">
                    <Image className="h-3 w-3" />
                    {categoryPageCounts?.[category.id] || 0}
                  </Badge>
                </div>
                <p className="text-xs text-muted-foreground">
                  Level {category.level} • /{category.path}
                </p>
              </div>
            </div>
            
            <div className="flex gap-2 flex-shrink-0">
              <Button
                variant="default"
                size="sm"
                onClick={() => handleOpenGenerate(category)}
                title="生成素材"
                className="gap-1"
              >
                <Wand2 className="h-4 w-4" />
                生成素材
              </Button>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => handleOpenCreate(category.id)}
                title="添加子分类"
              >
                <Plus className="h-4 w-4 mr-1" />
                子分类
              </Button>
              <Button
                variant="ghost"
                size="icon"
                onClick={() => handleOpenEdit(category)}
                title="编辑"
              >
                <Edit className="h-4 w-4" />
              </Button>
              <Button
                variant="ghost"
                size="icon"
                onClick={() => setDeletingCategoryId(category.id)}
                title="删除"
              >
                <Trash2 className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </Card>

        {hasChildren && isExpanded && (
          <div>
            {children.map(child => renderCategory(child, depth + 1))}
          </div>
        )}
      </div>
    );
  };

  const topLevelCategories = buildTree(categories || []);

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold flex items-center gap-2">
            <FolderTree className="h-6 w-6" />
            分类管理
          </h2>
          <p className="text-sm text-muted-foreground mt-1">
            管理多层级分类结构，支持无限层级嵌套
          </p>
        </div>
        <Button onClick={() => handleOpenCreate()} className="gap-2">
          <Plus className="h-4 w-4" />
          创建顶级分类
        </Button>
      </div>

      {isLoading ? (
        <div className="flex justify-center py-12">
          <Loader2 className="h-8 w-8 animate-spin" />
        </div>
      ) : topLevelCategories.length > 0 ? (
        <div>
          {topLevelCategories.map(category => renderCategory(category))}
        </div>
      ) : (
        <Card className="p-12">
          <p className="text-center text-muted-foreground">
            还没有分类，点击上方按钮创建第一个分类
          </p>
        </Card>
      )}

      {/* Create/Edit Dialog */}
      <Dialog 
        open={isCreating || !!editingCategory} 
        onOpenChange={(open) => {
          if (!open) {
            setIsCreating(false);
            setEditingCategory(null);
            resetForm();
          }
        }}
      >
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>
              {editingCategory ? "编辑分类" : "创建分类"}
            </DialogTitle>
            <DialogDescription>
              {formParentId && categories 
                ? `在 "${categories.find(c => c.id === formParentId)?.name}" 下创建子分类`
                : "创建新的顶级分类"
              }
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-4 py-4">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="name">分类名称 *</Label>
                <Input
                  id="name"
                  value={formName}
                  onChange={(e) => handleNameChange(e.target.value)}
                  placeholder="例如：Animals"
                />
              </div>
              
              <div>
                <Label htmlFor="slug">URL别名 *</Label>
                <Input
                  id="slug"
                  value={formSlug}
                  onChange={(e) => setFormSlug(e.target.value)}
                  placeholder="例如：animals"
                />
              </div>
            </div>
            
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="icon">图标 Emoji</Label>
                <Input
                  id="icon"
                  value={formIcon}
                  onChange={(e) => setFormIcon(e.target.value)}
                  placeholder="🐾"
                  maxLength={2}
                />
              </div>
              
              <div>
                <Label htmlFor="order">排序位置</Label>
                <Input
                  id="order"
                  type="number"
                  value={formOrderPosition}
                  onChange={(e) => setFormOrderPosition(e.target.value)}
                  placeholder="0"
                />
              </div>
            </div>
            
            {editingCategory && (
              <div>
                <Label htmlFor="parent">父分类</Label>
                <Select 
                  value={formParentId || "none"} 
                  onValueChange={(v) => setFormParentId(v === "none" ? null : v)}
                >
                  <SelectTrigger id="parent">
                    <SelectValue placeholder="选择父分类" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="none">无（顶级分类）</SelectItem>
                    {categories
                      ?.filter(c => c.id !== editingCategory?.id)
                      .map((cat) => (
                        <SelectItem key={cat.id} value={cat.id}>
                          {"  ".repeat(cat.level - 1)}{cat.icon} {cat.name}
                        </SelectItem>
                      ))}
                  </SelectContent>
                </Select>
              </div>
            )}
            
            <div>
              <Label htmlFor="description">描述</Label>
              <Textarea
                id="description"
                value={formDescription}
                onChange={(e) => setFormDescription(e.target.value)}
                rows={3}
                placeholder="简短描述这个分类..."
              />
            </div>
          </div>
          
          <DialogFooter>
            <Button 
              variant="outline" 
              onClick={() => {
                setIsCreating(false);
                setEditingCategory(null);
                resetForm();
              }}
            >
              取消
            </Button>
            <Button 
              onClick={handleSave} 
              disabled={createMutation.isPending || updateMutation.isPending}
            >
              {(createMutation.isPending || updateMutation.isPending) ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  保存中...
                </>
              ) : (
                "保存"
              )}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Generate Content Dialog */}
      <Dialog 
        open={!!generatingForCategory} 
        onOpenChange={(open) => {
          if (!open) {
            setGeneratingForCategory(null);
            setGeneratedImages([]);
            setGeneratedPagesData([]);
          }
        }}
      >
        <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Wand2 className="h-5 w-5" />
              为 "{generatingForCategory?.icon} {generatingForCategory?.name}" 生成素材
            </DialogTitle>
            <DialogDescription>
              使用 AI 为该分类生成涂色页素材
            </DialogDescription>
          </DialogHeader>

          <div className="space-y-4 py-4">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="gen-theme">主题 *</Label>
                <Input
                  id="gen-theme"
                  value={theme}
                  onChange={(e) => setTheme(e.target.value)}
                  placeholder="例如：可爱的猫咪"
                  disabled={isGenerating || generatedImages.length > 0}
                />
              </div>

              <div>
                <Label htmlFor="gen-difficulty">难度</Label>
                <Select 
                  value={difficulty} 
                  onValueChange={(v: any) => setDifficulty(v)}
                  disabled={isGenerating || generatedImages.length > 0}
                >
                  <SelectTrigger id="gen-difficulty">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="easy">简单</SelectItem>
                    <SelectItem value="medium">中等</SelectItem>
                    <SelectItem value="hard">困难</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="gen-type">生成类型</Label>
                <Select 
                  value={generationType} 
                  onValueChange={(v: any) => setGenerationType(v)}
                  disabled={isGenerating || generatedImages.length > 0}
                >
                  <SelectTrigger id="gen-type">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="single">单张图片</SelectItem>
                    <SelectItem value="series">故事系列</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label htmlFor="gen-count">
                  {generationType === "series" ? "系列长度" : "生成数量"}
                </Label>
                <Select 
                  value={generationType === "series" ? seriesLength : generateCount}
                  onValueChange={(v) => generationType === "series" ? setSeriesLength(v) : setGenerateCount(v)}
                  disabled={isGenerating || generatedImages.length > 0}
                >
                  <SelectTrigger id="gen-count">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {generationType === "series" ? (
                      <>
                        <SelectItem value="3">3 张</SelectItem>
                        <SelectItem value="5">5 张</SelectItem>
                        <SelectItem value="8">8 张</SelectItem>
                      </>
                    ) : (
                      <>
                        <SelectItem value="1">1 张</SelectItem>
                        <SelectItem value="2">2 张</SelectItem>
                        <SelectItem value="3">3 张</SelectItem>
                        <SelectItem value="5">5 张</SelectItem>
                      </>
                    )}
                  </SelectContent>
                </Select>
              </div>
            </div>

            {generatedImages.length === 0 ? (
              <Button 
                onClick={handleGenerate} 
                disabled={isGenerating}
                className="w-full gap-2"
              >
                {isGenerating ? (
                  <>
                    <Loader2 className="h-4 w-4 animate-spin" />
                    生成中...
                  </>
                ) : (
                  <>
                    <Wand2 className="h-4 w-4" />
                    开始生成
                  </>
                )}
              </Button>
            ) : (
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <p className="text-sm font-medium">已生成 {generatedImages.length} 张图片</p>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => {
                      setGeneratedImages([]);
                      setGeneratedPagesData([]);
                    }}
                  >
                    重新生成
                  </Button>
                </div>
                
                <div className="grid grid-cols-3 gap-4 max-h-[400px] overflow-y-auto p-2">
                  {generatedImages.map((url, idx) => (
                    <div key={idx} className="relative aspect-square border rounded-lg overflow-hidden bg-muted">
                      <img 
                        src={url} 
                        alt={`生成的图片 ${idx + 1}`}
                        className="w-full h-full object-cover"
                      />
                      <div className="absolute top-2 right-2 bg-background/80 rounded px-2 py-1 text-xs font-medium">
                        #{idx + 1}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>

          <DialogFooter>
            <Button 
              variant="outline" 
              onClick={() => {
                setGeneratingForCategory(null);
                setGeneratedImages([]);
                setGeneratedPagesData([]);
              }}
            >
              取消
            </Button>
            {generatedImages.length > 0 && (
              <Button 
                onClick={handleSaveGenerated} 
                disabled={isSaving}
                className="gap-2"
              >
                {isSaving ? (
                  <>
                    <Loader2 className="h-4 w-4 animate-spin" />
                    保存中...
                  </>
                ) : (
                  <>
                    <Image className="h-4 w-4" />
                    保存到分类
                  </>
                )}
              </Button>
            )}
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Delete Confirmation */}
      <AlertDialog 
        open={!!deletingCategoryId} 
        onOpenChange={(open) => !open && setDeletingCategoryId(null)}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>确认删除</AlertDialogTitle>
            <AlertDialogDescription>
              此操作将删除该分类及其所有子分类。所有关联的涂色页将变为未分类状态。此操作无法撤销。
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>取消</AlertDialogCancel>
            <AlertDialogAction
              onClick={() => deletingCategoryId && deleteMutation.mutate(deletingCategoryId)}
              className="bg-destructive text-destructive-foreground"
            >
              确认删除
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
}